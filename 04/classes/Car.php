<?php

class Car
{
    /**
    PHP — модификаторы доступа
    Свойства и методы могут иметь модификаторы доступа, которые определяют, где к ним можно получить доступ.

    Есть три модификатора доступа:

    public- к свойству или методу можно получить доступ отовсюду. Это по умолчанию
    protected - к свойству или методу можно получить доступ внутри класса и классов, производных от этого класса
    private - доступ к свойству или методу возможен ТОЛЬКО внутри класса

    В следующем примере мы добавили три разных модификатора доступа к трем свойствам (имя, цвет и вес). Здесь, если вы попытаетесь установить свойство имени, оно будет работать нормально (поскольку свойство имени является общедоступным и к нему можно получить доступ отовсюду). Однако, если вы попытаетесь установить свойство цвета или веса, это приведет к фатальной ошибке (поскольку свойства цвета и веса защищены и закрыты):
     */

    public $color;
    public $wheels;
    public $speed;

    /** ^ здесь мы создали свойства для класса*/

    public function __construct($color, $wheels, $speed)
    {
       $this->color = $color;
       $this->wheels = $wheels;
       $this->speed = $speed;
    }
    /** PHP — функция __construct
    Конструктор позволяет вам инициализировать свойства объекта при создании объекта.

    Если вы создаете __construct()функцию, PHP будет автоматически вызывать эту функцию при создании объекта из класса.

    Обратите внимание, что конструкция функции начинается с двух знаков подчеркивания (__)!

    В приведенном ниже примере мы видим, что использование конструктора избавляет нас от вызова метода
     */

    public function getCarInfo(){
        return "<h3>Авто</h3>
Цвет: {$this->color} <br>
Кол-во колес: {$this->wheels} <br>
Скорость: {$this->speed} <br>
        ";
    }
    /** вот таким образом создаем метод (метод эта функция класса и ничего большего) нужно назвать методы с CamelCase. При объявлении метода модификаторы(public, protected, private) не обязательны и по умолчанию такие методы будут публичными а с свойствами обязательно поставить модификаторы */

    /** PHP — ключевое слово $this
    Ключевое слово $this относится к текущему объекту и доступно только внутри методов.*/


    public function __destruct()
    {
        // TODO: Implement __destruct() method.
        var_dump($this);
    }

    /** PHP — функция __destruct
    Деструктор вызывается, когда объект уничтожается или сценарий останавливается или завершается.

    Если вы создадите __destruct()функцию, PHP автоматически вызовет эту функцию в конце скрипта.

    Обратите внимание, что функция уничтожения начинается с двух знаков подчеркивания (__)!

    В приведенном ниже примере есть функция __construct(), которая автоматически вызывается при создании объекта из класса, и функция __destruct(), которая автоматически вызывается в конце скрипта: */


}
